"""
Django settings for {{cookiecutter.project_slug}} project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dynaconf import Dynaconf

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

env = Dynaconf(
    envvar_prefix="DJANGO",
    settings_files=['settings.json', '.secrets.json'],
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = env.get("DJANGO_SECRET_KEY", "changethis")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.as_bool('DEBUG') if env.as_bool('DEBUG') is not None else False


DOMAIN = env.get("DJANGO_DOMAIN", default="{{cookiecutter.domain_name}}")
SITE_NAME = env.get("DJANGO_SITE_NAME", default="{{cookiecutter.site_name}}")

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles'
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',
    'djoser',
{% if cookiecutter.is_documentation_dev_only == 'n' %}
    'drf_spectacular'
{% endif %}
]

PROJECT_APPS = [
    'accounts',
{% if cookiecutter.is_documentation_dev_only == 'n' %}
    'api_docs',
{% endif %}
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
{% if cookiecutter.authentication_method == 'token' %}
        "rest_framework.authentication.TokenAuthentication",
{% endif %}
{% if cookiecutter.authentication_method == 'jwt' %}
        # added simple jwt authclass for jwt token
        "rest_framework_simplejwt.authentication.JWTAuthentication",
{% endif %}
    ),
    'EXCEPTION_HANDLER': '{{cookiecutter.project_slug}}.exceptions.api_exception_handler',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
{% if cookiecutter.is_documentation_dev_only == 'n' %}
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'
{% endif %}
}

# User authentication API library
DJOSER = {
    "LOGIN_FIELD": "email",
    "PASSWORD_RESET_CONFIRM_URL": "password/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": "activate/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": False,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": False,
    "INVITATION_URL": "acceptinvite/{uid}/{token}",
    "EMAIL": {
        "password_reset": "accounts.email.PasswordResetEmail",
    },
    "PERMISSIONS": {
        "user_delete": ["djoser.permissions.CurrentUserOrAdmin"],
    },
    "SERIALIZERS": {
        'user_create': 'accounts.serializers.UserCreateSerializer',
        "user": "accounts.serializers.UserSerializer",
        "current_user": "accounts.serializers.CurrentUserSerializer",
    },
    "LOGOUT_ON_PASSWORD_CHANGE": True
}

{% if cookiecutter.authentication_method == 'jwt' %}
SIMPLE_JWT = {
   'AUTH_HEADER_TYPES': ('JWT',),
}
{% endif %}

# AUTHENTICATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend"
]
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model
AUTH_USER_MODEL = "accounts.User"

# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# URLS
ROOT_URLCONF = '{{cookiecutter.project_slug}}.urls'

WSGI_APPLICATION = '{{cookiecutter.project_slug}}.wsgi.application'

{% if cookiecutter.is_documentation_dev_only == 'n' %}
# Documentation

SPECTACULAR_SETTINGS = {
    'AUTHENTICATION_CLASSES': (
        {% if cookiecutter.authentication_method == 'token' %}
        'rest_framework.authentication.TokenAuthentication',
        {% endif %}
        {% if cookiecutter.authentication_method == 'jwt' %}
        'rest_framework.authentication.JWTAuthentication',
        {% endif %}
    ),
    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True
    }
}
{% endif %}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_ROOT = str(BASE_DIR / "static")
STATIC_URL = "/static/"
STATICFILES_DIRS = []
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# MEDIA
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = str(BASE_DIR / "media")
MEDIA_URL = "/media/"

# Templates

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env.get('DB.NAME'),
        'USER': env.get('DB.USER'),
        'PASSWORD': env.get('DB.PASSWORD'),
        'HOST': env.get('DB.HOST'),
        'PORT': env.get('DB.PORT'),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = '{{cookiecutter.timezone}}'

USE_I18N = True

USE_TZ = True


# Security
CSRF_COOKIE_HTTPONLY = True

# Django Admin URL.
# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL regex.
ADMIN_URL = env.get("DJANGO_ADMIN_URL", "admin/")
# https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [("""{{ cookiecutter.author_name }}""", "{{ cookiecutter.email }}")]
# https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS

# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND",
    default="django.core.mail.backends.smtp.EmailBackend",
)
# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout
EMAIL_TIMEOUT = 5
EMAIL_HOST = env.get('EMAIL.EMAIL_HOST')
EMAIL_PORT = env.get('EMAIL.EMAIL_PORT')
EMAIL_USE_TLS = env.get('EMAIL.EMAIL_USE_TLS')
EMAIL_HOST_USER = env.get('EMAIL.EMAIL_HOST_USER')
DEFAULT_FROM_EMAIL = env.get('EMAIL.EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env.get('EMAIL.EMAIL_HOST_PASSWORD')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}
